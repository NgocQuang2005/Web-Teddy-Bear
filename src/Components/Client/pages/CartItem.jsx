import React, { useEffect, useState } from 'react';
import { message, Modal, Button, notification } from 'antd';
import { deleteCartItems, getAllCartItems, updateCartItems } from '../../../services/cartItem.services';
import { useNavigate } from 'react-router-dom';
import { getAllProducts } from '../../../services/products.services';

function CartItemClient() {
    const [cartItems, setCartItems] = useState([]);
    const [api, contextHolder] = notification.useNotification();
    const navigate = useNavigate();
    const fetchCartItems = async () => {
        const user = JSON.parse(localStorage.getItem("token")); // ƒê·∫£m b·∫£o key ƒë√∫ng

        if (!user || !user.id) {
            Modal.confirm({
                title: 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p',
                content: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng. B·∫°n c√≥ mu·ªën chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p kh√¥ng?',
                okText: 'C√≥',
                cancelText: 'Kh√¥ng',
                onOk() {
                    navigate('/login');
                },
            });
            return;
        }

        try {
            const [cartRes, productRes] = await Promise.all([
                getAllCartItems(),
                getAllProducts()
            ]);

            const userCartItems = cartRes.data.filter(item => item.userId === user.id);
            const allProducts = productRes.data;

            // Gh√©p d·ªØ li·ªáu s·∫£n ph·∫©m v√†o t·ª´ng item trong gi·ªè
            const mergedCart = userCartItems.map(item => {
                const product = allProducts.find(p => p.id === item.productId);
                return {
                    ...item,
                    productName: product?.name || 'Kh√¥ng r√µ',
                    imageUrl: product?.imageUrl || '',
                    unitPrice: product?.price || 0,
                    totalPrice: item.quantity * (product?.price || 0)
                };
            });

            setCartItems(mergedCart);
        } catch (error) {
            console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
            message.error("Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng.");
        }
    };
    useEffect(() => {
        fetchCartItems();
        window.addEventListener("cartItemUpdated", fetchCartItems);
        return () => window.removeEventListener("cartItemUpdated", fetchCartItems);
    }, [navigate]);

    const formatCurrency = (value) => `${new Intl.NumberFormat('vi-VN').format(value)} VND`;

    const handleBuyNow = (item) => {
        message.info(`B·∫°n ƒë√£ ch·ªçn mua ngay s·∫£n ph·∫©m: ${item.productName}`);
    };

    const handleDelete = async (id) => {
        const res = await deleteCartItems(id);
        console.log(">>>>", res.data)
        if (res.data) {
            api["success"]({
                message: 'Delete product',
                description:
                    'X√≥a product th√†nh c√¥ng',
            });
            fetchCartItems()
        } else {
            api["error"]({
                message: "Error delete product",
                description: JSON.stringify(res.message)
            });
        }
    }
    const handleUpdateQuantity = async (item, newQuantity) => {
        if (newQuantity <= 0) {
            message.warning("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0");
            return;
        }

        try {
            const res = await updateCartItems(item.id, item.userId, item.productId, newQuantity);
            if (res && res.data) {
                fetchCartItems();
            }
        } catch (err) {
            api.error({
                message: 'L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng',
                description: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
            });
        }
    };
    return (
        <>
            {contextHolder}
            <div className="max-w-5xl mx-auto mt-12 px-6">
                <h1 className="text-2xl font-semibold mb-6">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h1>

                {cartItems.length === 0 ? (
                    <div className="text-center text-gray-500 mt-20">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</div>
                ) : (
                    <div className="space-y-6">
                        {cartItems.map((item) => (
                            <div key={item.id} className="flex items-center justify-between border p-4 rounded shadow-sm bg-white">
                                <img
                                    src={`https://localhost:7229/${item.imageUrl}`}
                                    alt={item.productName}
                                    className="w-20 h-20 object-cover rounded border"
                                />

                                {/* Th√¥ng tin s·∫£n ph·∫©m */}
                                <div className="flex-1 ml-4">
                                    <h2 className="text-lg font-semibold">{item.productName}</h2>
                                    <p className="text-sm text-gray-600">ƒê∆°n gi√°: {formatCurrency(item.unitPrice)}</p>
                                    <div className="flex items-center gap-2">
                                        <span className="text-sm">S·ªë l∆∞·ª£ng:</span>
                                        <Button size="small" onClick={() => handleUpdateQuantity(item, item.quantity - 1)}>-</Button>
                                        <span className="px-2">{item.quantity}</span>
                                        <Button size="small" onClick={() => handleUpdateQuantity(item, item.quantity + 1)}>+</Button>
                                    </div>

                                    <p className="text-sm font-semibold text-red-500">Th√†nh ti·ªÅn: {formatCurrency(item.totalPrice)}</p>
                                </div>

                                {/* N√∫t h√†nh ƒë·ªông */}
                                <div className="flex flex-col gap-2">
                                    <Button type="primary" onClick={() => handleBuyNow(item)}>Mua ngay</Button>
                                    <Button danger onClick={() => handleDelete(item.id)}>Xo√°</Button>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </>
    );
}

export default CartItemClient;
